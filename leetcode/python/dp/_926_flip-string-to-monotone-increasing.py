#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
File name    : _926_flip-string-to-monotone-increasing.py
Author       : miaoyc
Create date  : 2022/6/11 23:00
Description  : 将字符串翻转到单调递增
"""

"""
难度：中等

如果一个二进制字符串，是以一些 0（可能没有 0）后面跟着一些 1（也可能没有 1）的形式组成的，那么该字符串是 单调递增 的。
给你一个二进制字符串 s，你可以将任何 0 翻转为 1 或者将 1 翻转为 0 。
返回使 s 单调递增的最小翻转次数。

示例 1：
输入：s = "00110"
输出：1
解释：翻转最后一位得到 00111.

示例 2：
输入：s = "010110"
输出：2
解释：翻转得到 011111，或者是 000111。

示例 3：
输入：s = "00011000"
输出：2
解释：翻转得到 00000000。


提示：
1 <= s.length <= 105
s[i] 为 '0' 或 '1'
"""

"""
解题思路：
遍历字符串，找到一个分界点，使得该分界点之前1的个数和分界点之后0的个数之和最小，把分界点之前的1变成0，之后的0变成1
"""


class Solution:
    def minFlipsMonoIncr(self, s: str) -> int:
        c = s.count('0')    # 分界点为0之前，统计之后的0
        res = [c]
        for x in s:
            if x == '1':    # 如果是1，分界点之前1的个数+1，分界点之后0的个数不变
                c += 1
            else:           # 如果是0，分界点之前1的个数不变，分界点之后0的个数减1
                c -= 1
            res.append(c)
        return min(res)
